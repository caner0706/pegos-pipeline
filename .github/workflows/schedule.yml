name: Pegos Live Data Fetch & Predict

on:
  schedule:
    - cron: "0 */4 * * *"   # her 4 saatte bir (UTC)
  workflow_dispatch:

jobs:
  fetch_and_upload:
    runs-on: ubuntu-latest
    timeout-minutes: 50

    env:
      AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
      CT0: ${{ secrets.CT0 }}
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
      HF_DATASET_REPO: ${{ secrets.HF_DATASET_REPO }}
      TWITTER_USER: ${{ secrets.TWITTER_USER }}
      TWITTER_PASS: ${{ secrets.TWITTER_PASS }}
      KEEP_LAST: ${{ secrets.KEEP_LAST }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Chrome & dependencies
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y wget gnupg
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Install Python dependencies
        run: |
          set -e
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Debug environment & HF token
        run: |
          set -e
          echo "=== DEBUG ENV ==="
          echo "HF_DATASET_REPO=${HF_DATASET_REPO}"
          echo "AUTH_TOKEN length: ${#AUTH_TOKEN}"
          echo "CT0 length: ${#CT0}"
          echo "KEEP_LAST=${KEEP_LAST}"
          echo "HF_TOKEN length: ${#HF_TOKEN}"
          echo "huggingface_hub version:"
          python -m pip show huggingface_hub || true
          echo "HF whoami check:"
          python - <<'PY'
          import os
          from huggingface_hub import HfApi
          api = HfApi(token=os.getenv("HF_TOKEN"))
          print("OK:", bool(api.whoami()))
          PY
          echo "=================="

      - name: Run scraper notebook (data.ipynb)
        env:
          AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
          CT0: ${{ secrets.CT0 }}
        run: |
          set -e
          echo "🚀 Starting Pegos Twitter Scraper..."
          jupyter nbconvert --to notebook --execute data.ipynb --output output.ipynb --ExecutePreprocessor.timeout=1800
          echo "✅ Notebook executed successfully"

      - name: Upload scraped data to Hugging Face (daily folder)
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_DATASET_REPO: ${{ secrets.HF_DATASET_REPO }}
        run: |
          set -e
          TODAY=$(date -u +%F)
          CSV="/tmp/data/${TODAY}/pegos_output.csv"
          echo "📅 Checking for daily CSV at: ${CSV}"
          if [ -f "${CSV}" ]; then
            echo "📤 Uploading CSV for ${TODAY}..."
            export LOCAL_CSV="${CSV}"
            python upload_to_hf.py
          else
            echo "❌ No CSV file found — skipping upload."
          fi

      - name: Merge and upload full dataset (tweets + BTC)
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_DATASET_REPO: ${{ secrets.HF_DATASET_REPO }}
        run: |
          set -e
          echo "🔄 Building merged dataset..."
          python build_dataset_hf.py
          echo "✅ Merged dataset uploaded to HF."

      - name: Clean merged dataset (remove duplicates/outliers)
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_DATASET_REPO: ${{ secrets.HF_DATASET_REPO }}
        run: |
          set -e
          echo "🧹 Cleaning merged dataset..."
          python clean_dataset_hf.py
          echo "✅ Cleaned dataset uploaded to HF."

      - name: Run Pegos Hybrid Prediction
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_DATASET_REPO: ${{ secrets.HF_DATASET_REPO }}
        run: |
          set -e
          echo "🤖 Running Pegos hybrid prediction pipeline..."
          python predict_with_model.py
          echo "✅ Hybrid model predictions completed and uploaded to HF."

      - name: List HF dataset files
        if: always()
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_DATASET_REPO: ${{ secrets.HF_DATASET_REPO }}
        run: |
          set -e
          echo "📂 Listing HF dataset files..."
          python - <<'PY'
          import os
          from huggingface_hub import HfApi
          api = HfApi(token=os.getenv("HF_TOKEN"))
          repo = os.getenv("HF_DATASET_REPO")
          for f in api.list_repo_files(repo_id=repo, repo_type="dataset"):
              print(" -", f)
          PY

      - name: Show workspace & day folders
        if: always()
        run: |
          echo "📁 Workspace contents:"
          ls -lah
          echo
          echo "📅 Daily data folders:"
          ls -lah /tmp/data || true

      - name: Show notebook output summary
        if: always()
        run: |
          echo "📜 Showing notebook text output (first *** lines):"
          head -n 200 output.ipynb | sed 's/\\n/\n/g' | grep -E "✅|⚠️|❌|tweet|Upload|Total" || true
